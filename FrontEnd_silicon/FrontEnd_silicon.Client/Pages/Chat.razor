@page "/profile/chat"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]


<PageTitle>Chat</PageTitle>

<div class="row">
    <div class="col">
        <div class="card" id="card-chat">
            <div class="card-header">Blazor SignalR Chat </div>
            <div class="card-body">

                <ul class="list-group">
                    @foreach (var message in messages)
                    {
                        <li class="list-group-item mb-3 @(message.UserName == userName ? "chat-bubble-right" : "chat-bubble-left")">
                            <div>
                                <strong>@message.UserName </strong><span> @message.Created.ToString("HH:mm")</span>
                            </div>
                            <div>@message.Message</div>
                        </li>
                    }
                </ul>

                <div class="mt-3" style="height: 20px;">
                    @if (!string.IsNullOrEmpty(typingUser))
                    {
                        <div>@typingUser is typing<span class="typing-indicator">...</span></div>
                    }
                </div>
            </div>

            <div class="card-footer">
                <div class="mt-2">
                    <textarea class="form-control" @bind="currentMessage" @oninput="NotifyTyping" placeholder="Message"></textarea>
                </div>
                <div class="col-2 my-3" style="width: 180px;">
                    <button class="button btn-theme" @onclick="Send">Send Message</button>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
     [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = null!;

    private HubConnection? connection;
    private bool isConnected => connection?.State == HubConnectionState.Connected;
    private List<ChatMessage> messages = new();
    private string? userName;
    private string? currentMessage;
    private string? typingUser;
    private System.Timers.Timer? typingTimer;

    private class ChatMessage
    {
        public string? UserName { get; set; }
        public string? Message { get; set; }
        public DateTime Created { get; set; } = DateTime.Now;
    }

    private async Task NotifyTyping()
    {
        if (isConnected)
        {
            await connection!.SendAsync("Typing", userName);
        }
    }

    private async Task Send()
    {
        if (isConnected && !string.IsNullOrEmpty(currentMessage))
        {
            var newMessage = new ChatMessage
                {
                    UserName = userName,
                    Message = currentMessage,
                    Created = DateTime.Now
                };
            await connection!.SendAsync("SendMessageToAll", newMessage.UserName, newMessage.Message, newMessage.Created);

            currentMessage = string.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Identity.Name;
        }
        else
        {
            userName = "Anonymous";
        }

        connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        connection.On<string, string, DateTime>("ReceiveMessage", (fromUser, message, dateTime) =>
        {
            var newMessage = new ChatMessage
                {
                    UserName = fromUser,
                    Message = message,
                    Created = dateTime
                };
            messages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        });

        connection.On<string>("UserTyping", (typingUserName) =>
        {
            typingUser = typingUserName;
            InvokeAsync(StateHasChanged);

            typingTimer?.Stop();
            typingTimer = new System.Timers.Timer(2000);
            typingTimer.Elapsed += (s, e) =>
            {
                typingUser = null;
                typingTimer.Stop();
                InvokeAsync(StateHasChanged);
            };
            typingTimer.Start();
        });

        await connection.StartAsync();
    }
}