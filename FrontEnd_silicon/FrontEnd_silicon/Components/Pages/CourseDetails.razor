@page "/courses/details/{courseId}"
@using FrontEnd_silicon.Data
@using FrontEnd_silicon.Models
@using FrontEnd_silicon.Services
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Routing



@rendermode InteractiveServer
@attribute [StreamRendering]

@inject CourseService CourseService
@inject UserDataService UserDataService
@inject NavigationManager NavigationManager




@if (course == null)
{
    <p><i class="fa-solid fa-spinner"></i>Loading...</p>
}
else
{
    <section class="course-details">
        <div class="img-header">
            <img src="@course.ImageUri" class="img-card" alt="">
        </div>
        <div class="container">
            @if (!string.IsNullOrWhiteSpace(statusMessage))
            {
                <p>@statusMessage</p>
            }
            <div class="text-header">
                <div class="bread-crumbs">
                    <a href="/"><i class="fa-light fa-house"></i>Home</a>
                    <i class="fa-solid fa-angles-right"></i>
                    <a href="/courses">Courses</a>
                    <i class="fa-solid fa-angles-right"></i>
                    <a href="#">@course.Title</a>
                </div>
                <div class="title-description">
                    <div class="labels">
                        @if (course.IsBestseller)
                        {
                            <div class="bestseller">Best Seller</div>
                        }
                        @if (course.IsDigital)
                        {
                            <div class="digital">Digital</div>
                        }
                    </div>
                    <h1 class="title">@course.Title</h1>
                    <p class="text">@course.Ingress</p>
                    <div class="info">
                        <div class="stars">
                            @for (var i = 0; i < course.StarRating; i++)
                            {
                                <i class="fa-solid fa-star" style="color: #FFE8AD;"></i>
                            }
                        </div>
                        <div class="reviews">
                            <p>(@course.Reviews reviews)</p>
                            <div></div>
                        </div>
                        <div class="thumbs">
                            <i class="fa-regular fa-thumbs-up" style="color: #B4B7C9;"></i>
                            <span>@course.Likes Likes</span>
                        </div>
                        <div class="hours">
                            <i class="fa-regular fa-clock" style="color: #B4B7C9;"></i>
                            <span>@course.Hours hours</span>
                        </div>
                    </div>
                    <div class="creator">
                        @foreach (var author in course.Authors!)
                        {
                            <img src="@author.AuthorImg" alt="">
                            <div class="created">Created by</div>
                            <div class="creator-name">@author.Name</div>
                        }
                    </div>
                </div>
            </div>
            <div class="content">
                <div class="description">
                    <div class="description-title">
                        <h1>Course Description</h1>
                        @course.Content!.Description
                    </div>
                </div>
                <div class="aside-info">
                    <h4>This course includes:</h4>
                    @foreach (var include in course.Content.Includes!)
                    {
                        <div class="info">
                            <i class="fa-solid fa-trophy"></i>
                            <p>@include</p>
                        </div>
                    }
                    <div class="prices">
                        @if (course.Prices!.Discount > 0)
                        {
                            <h2 class="current-price">@course.Prices.Currency @course.Prices.Discount</h2>
                            <h4 class="original-price">@course.Prices.Currency @course.Prices.Price</h4>
                        }
                        else
                        {
                            <h2 class="current-price">@course.Prices.Currency @course.Prices.Price</h2>
                        }
                    </div>
                    <EditForm FormName="JoinCourse" Model="userCourses" OnValidSubmit="HandleJoinCourse" novalidate>
                        <InputText type="hidden" name="userId" @bind-Value="@user.Id" />
                        <InputText type="hidden" name="courseId" @bind-Value="@course.Id" />
                        <button class="btn btn-theme-s" type="submit">Join course</button>
                    </EditForm>
                </div>

                
                <div class="course-details">
                    <div class="container">
                        <div class="box-one">
                            <h2>Program Details</h2>
                            @foreach (var detail in course.Content.ProgramDetails!)
                            {
                                <div class="content">
                                    <div class="circle-gray">
                                        <div class="circle-wite">
                                            <p>@detail.Id</p>
                                        </div>
                                    </div>
                                    <div class="content-text">
                                        <h3>@detail.Title</h3>
                                        <p>@detail.Description</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>
          
        </div>
    </section>
}

@code {
    [Parameter]
    public string? courseId { get; set; }

    [SupplyParameterFromQuery]
    private string statusMessage { get; set; } = null!;

    [CascadingParameter]
    public ApplicationUser user { get; set; } = null!;

    public UserCourses userCourses = new UserCourses();


    public Course? course;

    protected override async Task OnInitializedAsync()
    {
        user = await UserDataService.GetUserDataAsync();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        courseId = uri.Segments.LastOrDefault();
        if (courseId != null)
            await GetCourseDetails(courseId);
    }

    public async Task GetCourseDetails(string courseId)
    {
        try
        {
            course = await CourseService.GetCourseByIdAsync(courseId);
        }
        catch (Exception)
        {
            statusMessage = "Course not found";
        }
    }

    public async Task HandleJoinCourse(EditContext editContext)
    {
        if (user != null && course != null)
        {
            var userCourse = new UserCourses
                {
                    UserId = user.Id,
                    CourseId = course.Id!
                };
            var result = await CourseService.RequestCreateUserCoursesAsync(userCourse);
            if (result != null)
            {
                statusMessage = "Course added to your courses";
            }
        }
    }
}