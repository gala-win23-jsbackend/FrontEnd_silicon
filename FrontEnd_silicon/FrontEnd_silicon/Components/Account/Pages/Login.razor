@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FrontEnd_silicon.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign In</PageTitle>


<section id="signin">
    <div class="container">

        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-danger" role="alert">
                @StatusMessage
            </div>
        }




        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <ValidationSummary class="text-danger" role="alert" />
            <h1> Welcome back</h1>
            <p>Don't have an account yet? <a href="/Account/Register">Sign up here</a></p>

            <div class="form-content">
                <div id="form-email" class="input-group">
                    <label for="email" class="form-label">Email</label>
                    <InputText type="email" @bind-Value="Input.Email" autocomplete="email" aria-required="true" placeholder="enter your  email" />

                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div id="form-password" class="input-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="password" />

                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>



                <button id="form-submit" type="submit" class="btn-theme-s"><i class="fa-solid fa-right-to-bracket"></i>Sign in</button>

                <div id="rememberMe" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="Input.RememberMe" autocomplete="rememberme" />
                        <label>Remember me </label>
                    </div>
                    <ValidationMessage For="() => Input.RememberMe" />
                </div>


                <NavLink id="form-forgot-password" href="/Account/ForgotPassword">Forgot your password?</NavLink>

                <div class="exernal-providers">
                    <h6>Or sign in with your social account</h6>
                    <div class="providers">
                        <a class="btn-theme-s" asp-controller="Auth" asp-action="Google"><i class="fa-brands fa-google"></i>Google</a>
                        <a class="btn-theme-s" asp-controller="Auth" asp-action="Facebook"><i class="fa-brands fa-facebook"></i>Facebook</a>


                    </div>
                </div>

            </div>
        </EditForm>

    </div>

</section>

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";


    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Display(Name = "Email", Prompt = "Enter your email", Order = 0)]
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = "";

        [Display(Name = "Password", Prompt = "********", Order = 1)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

    }
}
