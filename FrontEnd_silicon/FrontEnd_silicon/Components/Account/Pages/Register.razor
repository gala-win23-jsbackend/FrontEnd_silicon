@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using FrontEnd_silicon.Filters
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FrontEnd_silicon.Data
@using System.Net.Http.Json
@using System.Net.Http
@using System.Diagnostics

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Sign Up</PageTitle>

<section id="signup">
    <div class="container">


         <EditForm FormName="signupform" asp-route-returnUrl="@ReturnUrl"  Model="SignUpForm" OnValidSubmit="RegisterUser" method="post" novalidate> 
        @* <EditForm FormName="signupform"  Model="SignUpForm" OnValidSubmit="RegisterUser" method="post" novalidate> *@

                <DataAnnotationsValidator />

            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/login">Sign in here</a>. </p>

            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @StatusMessage
                </div>
            }

            <div class="form-content">
                <div id="form-firstname" class="input-group">
                    <label>FirstName</label>
                    <InputText @bind-Value="SignUpForm.FirstName" autocomplete="givenname" aria-required="true" />
                    <ValidationMessage For="() => SignUpForm.FirstName" />
                </div>

                <div id="form-lastname" class="input-group">
                    <label>LastName</label>
                    <InputText @bind-Value="SignUpForm.LastName" autocomplete="surname" aria-required="true" />
                    <ValidationMessage For="() => SignUpForm.LastName" />
                </div>

                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText @bind-Value="SignUpForm.Email" autocomplete="email" aria-required="true" />
                    <ValidationMessage For="() => SignUpForm.Email" />
                </div>

                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="SignUpForm.Password" autocomplete="password" aria-required="true" />
                    <ValidationMessage For="() => SignUpForm.Password" />
                </div>

                <div id="form-confirm" class="input-group">
                    <label>ConfirmPassword</label>
                    <InputText type="password" @bind-Value="SignUpForm.ConfirmPassword" autocomplete="confirm" aria-required="true" />
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" />
                </div>



                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" autocomplete="terms" aria-required="true" />
                        <label>I agree to the <a href="/">Terms</a> & <a href="/">Conditions</a>.</label>
                    </div>

                    <ValidationMessage For="() => SignUpForm.TermsAndConditions" />
                </div>

            </div>

            <button id="form-submit" type="submit" class="btn-theme-s"><i class="fa-regular fa-user"></i>Sign Up</button>
        </EditForm>

    </div>

</section>

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";




    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();



    public class SignUpFormModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First Name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        [MinLength(2, ErrorMessage = "First name must be at least 2 points")]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last Name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email", Prompt = "Enter your email", Order = 2)]
        [Required(ErrorMessage = "Email is required")]
        [RegularExpression(@"^(?=.*[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,})[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$",
        ErrorMessage = "The email format is not valid.")]
        public string Email { get; set; } = null!;

        [Display(Name = "Password", Prompt = "********", Order = 3)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "At least one lowercase, uppercase letter and  one special character.")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d\s])(?=.*[a-zA-Z\d]).{8,}$",
        ErrorMessage = " At least one lowercase, uppercase letter and  one special character.")]
        public string Password { get; set; } = "";

        [Display(Name = "Confirm Password", Prompt = "********", Order = 4)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password must be confirmed")]
        [Compare("Password", ErrorMessage = "The confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Terms & Conditions ", Order = 5)]
        [CheckBoxRequired(ErrorMessage = "Terms & Conditions is required field ")]
        public bool TermsAndConditions { get; set; } = false;
    }




    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserProfile = new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName
                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email,
                Created = DateTime.Now,
            };


        try
        {

            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "Email already exists";

                return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);


            if (result.Succeeded)
            {
              
                await Http.PostAsJsonAsync("https://verificationprovider-silicon-gala.azurewebsites.net/api/GenerateVerificationCodeHttp?code=3EALQEKhAI2-5Lfz4ZFeiHVY_agBpGkgVtP5CKbegemvAzFuPcHMOw%3D%3D", new { Email = SignUpForm.Email });
              
                    NavigationManager.NavigateTo($"Account/RegisterConfirmation?email={user.Email}&returnUrl={ReturnUrl}");
                
                
            }
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account. Please try again.";
                return;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occured while creating the account.";
            return;
        }


        
       

    }
}