@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FrontEnd_silicon.Data
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient Http


<PageTitle>Register confirmation</PageTitle>

<section id="confirmation">
    <div class="container w-75">
        <h1>Register confirmation</h1>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <p>@statusMessage</p>
        }

       

        <EditForm class="form" novalidate FormName="VerifyCode" Model="VerifyCodeForm" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <h1 class="mb-5" >Verify Your Account</h1>

            <div class="form-content">

                <div class="input-group">
                    
                    <label class="form-label">Enter Your Verification Code</label>
                    <InputText type="text" @bind-Value="VerifyCodeForm.Code" class="w-50 p-3 h-50" />

                    <ValidationMessage For="() =>VerifyCodeForm.Code" class="text-danger" />
                    <p>@statusMessage</p>
                </div>

                <button type="submit" class="btn btn-theme w-50 mb-3"><i class="fa-solid fa-right-to-bracket"></i>Verify Code</button>
            </div>

        </EditForm>
        <p>Didn't receive an email?<a @onclick="ResendCode" class="link-offset-2 link-underline link-underline-opacity-100">resend email</a></p>

    </div>
</section>


@code {

    [SupplyParameterFromQuery]
    public string? statusMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

    private async Task OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-gala.azurewebsites.net/api/verification?code=RVY7ufa5b06yFUn3IiKiD0L78VQhjuXyvd6RlhbJj06aAzFuw6F0Qw%3D%3D", new

        {
            Email = Email,
            Code = VerifyCodeForm.Code
        });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            if (user != null)
            {
                try
                {
                    user!.EmailConfirmed = true;
                    await UserManager.UpdateAsync(user);
                    statusMessage = "The account has been confirmed successfully.";

                    NavigationManager.NavigateTo("/account/login");
                }
                catch (Exception ex)
                {
                   
                    statusMessage = "Error logging in." + ex.Message;
                }
            }

        }
        else
        {
            statusMessage = "Invalid code.";
        }
    }



    private async Task ResendCode()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-gala.azurewebsites.net/api/GenereteVerificationCodeHTTP?code=l81zmqzuxHJvUlyvh52RshQlon1N8-2sqZ1-4xyZf6mbAzFugzx9pA%3D%3D", new { Email = Email });

       if (result.IsSuccessStatusCode)
        {
            statusMessage = "Code resent";
        }
        else
        {
            statusMessage = "Unable to resend code";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("/");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for missing email";
        }
    }
    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}