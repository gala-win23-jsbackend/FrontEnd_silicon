@page "/profile/notifications"

@using FrontEnd_silicon.Components.Account.Shared
@using FrontEnd_silicon.Data
@using FrontEnd_silicon.Services
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@layout ManageLayout
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject UserDataService UserDataService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ThemeService ThemeService
@inject HttpClient Http

<div class="content">
    <div class="password-form">
        <h2 class="title">Notifications</h2>


        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-warning" role="alert">
                @StatusMessage
            </div>
        }


        <EditForm class="form" method="post" Model="Notifications" FormName="PreferredNotifications" OnValidSubmit="@(() => SubmitNotifications(Notifications))" novalidate>
            <DataAnnotationsValidator />
            <div class="current-password">
                <label class="form-label">Preferred email for notifications</label>
                <div class="mb-3">
                    <InputText @bind-Value="Notifications.PreferredEmail" type="email" class="form-control" />
                    <ValidationMessage For="() =>Notifications.PreferredEmail" class="text-danger" />
                </div>
            </div>

            <div id="newsletter-switch" class="btn-switch">
                <label class="switch" for="newsletter-switch-mode">
                    <InputCheckbox @bind-Value="Notifications.SubscribeNewsletter" type="checkbox" id="newsletter-switch-mode" />
                    <span class="slider round"></span>
                </label>
                <label class="mb-1">Subscribe to Newsletter</label>                
            </div>
            <p class="mb-3" style="margin-left: 55px;">Nec, posuere non felis duis massa vitae aliquet.</p>



            <div id="theme-switch" class="btn-switch">
                <label class="switch" for="theme-switch-mode">
                    <InputCheckbox @bind-Value="Notifications.DarkMode" type="checkbox" id="theme-switch-mode" />
                    <span class="slider round"></span>
                </label>
                <label class="mb-1">Use Dark Mode Theme in Application</label>                
            </div>
            <p class="mb-5" style="margin-left: 55px;" >Tortor massa porttitor enim tristique neque fermentum sed.</p>


            @if (user != null)
            {
                <InputText type="hidden" @bind-Value="@user.Id" />
            }


            <div class="buttons">
                <button type="reset" class="button btn-gray">Cancel</button>
                <button type="submit" class="button btn-theme">Save Changes</button>
            </div>
        </EditForm>
    </div>
</div>



@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = null!;

    public NotificationsFormModel Notifications { get; set; } = new();

    [CascadingParameter]
    public ApplicationUser user { get; set; } = null!;

    public class NotificationsFormModel
    {
        [Required(ErrorMessage = "An valid email address is required")]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 0)]
        public string PreferredEmail { get; set; } = null!;

        [Display(Name = "Subscribe to newsletter", Order = 1)]
        public bool SubscribeNewsletter { get; set; }


        [Display(Name = "Use Dark Mode Theme in Application", Order = 2)]
        public bool DarkMode { get; set; }

        public string UserId { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        user = await UserDataService.GetUserDataAsync();


        if (user != null && user.PreferredEmail != null)
        {
            Notifications.PreferredEmail = user.PreferredEmail;
            Notifications.SubscribeNewsletter = user.SubscribeNewsletter;
            Notifications.DarkMode = user.DarkMode;
        }
    }

    private async Task SubmitNotifications(NotificationsFormModel notifications)
    {
        try
        {
            var notificationFormModel = new NotificationsFormModel
                {
                    PreferredEmail = notifications.PreferredEmail,
                    SubscribeNewsletter = notifications.SubscribeNewsletter,
                    DarkMode = notifications.DarkMode,
                    UserId = user.Id
                };

            
            var response = await Http.PostAsJsonAsync("https://userprovider-silicon-gala.azurewebsites.net/api/UpdateUserNotifications?code=Fxe6UTvjGaKTepoRaCDoZjUojoZU0XWA8PqQ-ghOXi4KAzFusawEHA%3D%3D", notificationFormModel);

           //Funkar imte  var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("API:Update_User_Notification"), notificationFormModel);
          
            
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<ApplicationUser>();

                StateHasChanged();
               

                StatusMessage = "Account notifications updated successfully.";
                return;
            }
            else
            {
                StatusMessage = "An error occured while updating the account notifications.";
                return;
            }
        }
        catch (Exception)
        {
            StatusMessage = "An error occured while updating the account notifications.";
            return;
        }
    }
}



