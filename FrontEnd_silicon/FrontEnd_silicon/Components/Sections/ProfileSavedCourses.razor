@page "/profile/savedcourses"

@using FrontEnd_silicon.Components.Account.Shared
@using FrontEnd_silicon.Data
@using FrontEnd_silicon.Models
@using FrontEnd_silicon.Services
@layout ManageLayout


@rendermode InteractiveServer
@attribute [StreamRendering]

@inject CourseService CourseService
@inject UserDataService UserDataService

<section class="account-saveditems">

    <div class="container">
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <p>@statusMessage</p>
        }

        <div class="title-button">
            <h2 class="title">Saved Items</h2>
            <EditForm FormName="RemoveAll" OnValidSubmit="RemoveAllUserCourse" Model="userId">
                <InputText type="hidden" name="userId" @bind-Value="@user!.Id" />
                
                <button type="submit" class="btn btn-delete">
                    <i class="fa-solid fa-trash-can"></i>Delete all
                </button>
            </EditForm>
        </div>
        <div class="content">
          
            <div class="course-list">
                @if (CourseCards.Count == 0)
                {
                    <div>No Courses Found</div>
                }
                else
                {
                    @foreach (var course in CourseCards)
                    {
                        userCourse = new UserCourses
                    {
                        UserId = user.Id,
                        CourseId = course.Id
                    };

                        <div class="course">
                            @if (course.IsBestseller)
                            {
                                <div class="best-seller">Best Seller</div>
                            }



                            <EditForm Model="userCourse" OnValidSubmit="@(() => RemoveUserCourse(userCourse))" novalidate>
                                <InputText type="hidden" @bind-Value="userCourse.UserId" />
                                <InputText type="hidden" @bind-Value="userCourse.CourseId" />
                                <button type="submit" class="saved-item" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Remove">
                                    <i class="fa-solid fa-bookmark"></i>
                                </button>
                            </EditForm>

                            <div> <img class="course-image" src="@course.ImageUri" /></div>

                            <div class="info">
                                <h2 class="course-title">@course.Title</h2>
                                <div class="course-creator">by @course.Author</div>
                                <div class="course-prices">
                                    @if (course.DiscountPrice > 0)
                                    {
                                        <div class="discount-price">$@course.DiscountPrice</div>
                                        <div class="original-price discount">$@course.Price</div>
                                    }
                                    else
                                    {
                                        <div class="original-price">$@course.Price</div>
                                    }

                                </div>

                                <hr />

                                <div class="course-footer">
                                    <div class="course-hours"><i class="fa-regular fa-clock"></i> @course.Hours</div>
                                    <div class="course-likes">
                                        <i class="fa-regular fa-thumbs-up"></i>
                                        <span>@course.LikesInProcent</span>
                                        <span>@course.LikesInNumbers</span>
                                    </div>
                                </div>
                            </div>

                        </div>

                    }
                }

            </div>
        </div>
    </div>
</section>



@code {


    private string statusMessage = string.Empty;

    [CascadingParameter]
    public ApplicationUser user { get; set; } = new ApplicationUser();

    [SupplyParameterFromForm]
    public UserId userId { get; set; } = new UserId();

    public List<CourseCardModel> CourseCards { get; set; } = new List<CourseCardModel>();

    public UserCourses userCourse = new UserCourses();

    public class CourseCardModel
    {
        public string Id { get; set; } = null!;
        public bool IsBestseller { get; set; }
        public string? ImageUri { get; set; }
        public string? Title { get; set; }
        public string? Author { get; set; }
        public decimal? Price { get; set; }
        public decimal? DiscountPrice { get; set; }

        public string? Hours { get; set; }
        public string? LikesInProcent { get; set; }
        public string? LikesInNumbers { get; set; }
        public bool? IsDigital { get; set; }
    }

    public async Task RemoveUserCourse(UserCourses userCourses)
    {

        var response = await CourseService.RequestRemoveUserCourseAsync(userCourse);
        if (response)
        {
            statusMessage = "Course removed";
            CourseCards = CourseCards.Where(c => c.Id != userCourse.CourseId).ToList();
            StateHasChanged();
        }
        else
        {
            statusMessage = "Failed to remove course";
        }


    }

    public async Task RemoveAllUserCourse(EditContext editContext)
    {
        var response = await CourseService.RequestRemoveAllUserCourseAsync(userId.Id);
        if (response)
        {
            statusMessage = "All courses removed";
            StateHasChanged();
            RedirectManager.RedirectTo("/profile/details");
        }
        else
        {
            statusMessage = "Failed to remove courses";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        user = await UserDataService.GetUserDataAsync();
        userId.Id = user.Id;

        if (user != null)
        {
            var response = await CourseService.GetUserCourseIdsAsync(user.Id);
            if (response != null)
            {
                foreach (var courseId in response)
                {
                    var course = await CourseService.GetCourseByIdAsync(courseId);
                    if (course != null)
                    {
                        var coursecard = new CourseCardModel
                            {
                                Id = course.Id!,
                                IsBestseller = course.IsBestseller,
                                ImageUri = course.ImageUri,
                                Title = course.Title,
                                Author = string.Join(", ", course.Authors!.Select(a => a.Name)),
                                Price = course.Prices?.Price ?? 0,
                                DiscountPrice = course.Prices?.Discount ?? 0,
                                Hours = course.Hours,
                                LikesInProcent = course.LikesInProcent,
                                LikesInNumbers = course.Likes,
                                IsDigital = course.IsDigital

                            };
                        CourseCards.Add(coursecard);

                    }
                }
            }
        }
    }

}

